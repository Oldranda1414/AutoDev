---
config:
  class:
    hideEmptyMembersBox: true
  layout: elk
  theme: dark
title: Full AutoDev Class Diagram
---
classDiagram
    class main {
        main()
    }
    main ..> sys
    main ..> interface

    class interface {
        main(args: list[str])
    }
    interface ..> docopt
    interface ..> dispatcher

    class dispatcher {
        dispatch(args: dict[str, str])
    }
    dispatcher ..> sys
    dispatcher ..> handlers
    dispatcher ..> console

    class handlers {
        generate_config(project_path: str, model: str, prompt_path: str)
        generate_direnv(project_path: str)
        install_model(model: str)
        uninstall_model(model: str)
        list_models()
    }
    handlers ..> configuration
    handlers ..> direnv
    handlers ..> install
    handlers ..> uninstall
    handlers ..> list
    handlers ..> console
    handlers ..> AutoDevError
    handlers ..> ModelNotInstalledError
    handlers ..> termination

    class termination {
        exit_success()
        handle_exception(exc: AutoDevError)
    }
    termination ..> sys
    termination ..> console
    termination ..> AutoDevError

    %% file_system

    class file_system:::file_system {
        generate_fso_list(fso_path: str, depth: int): list[FileSystemObject]
    }
    file_system ..> FileSystemObject
    file_system ..> os

    class FileSystemObject:::file_system {
        name: str
        contents: Optional[str]
        children: list[FileSystemObject]
        is_dir: bool
        \_\_init\_\_(name: str, contents: Optional[str] = None)
    }
    FileSystemObject ..> Optional

    %% error

    %%% auto_dev

    class AutoDevError:::error {
        exit_code: int
        \_\_init\_\_()
        build_message(): tuple[str, ...]
    }
    AutoDevError ..> abc
    AutoDevError <|-- Exception

    class OllamaNotInstalledError:::error {
        exit_code: int
        \_\_init\_\_()
        build_message(): tuple[str, ...]
    }
    OllamaNotInstalledError <|-- AutoDevError

    %%% dependency

    class FlakeExistsError:::error {
        exit_code: int
        \_\_init\_\_(project_path: str)
        build_message(): tuple[str, ...]
    }
    FlakeExistsError <|-- AutoDevError
    FlakeExistsError ..> os

    %%% file

    class EnvrcExistError:::error {
        exit_code: int
        \_\_init\_\_(project_path: str)
        build_message(): tuple[str, ...]
    }
    EnvrcExistError <|-- AutoDevError
    EnvrcExistError ..> os

    %%% generation

    class ExceededAttemptsError:::error {
        exit_code: int
        \_\_init\_\_(model: str, attempts: int)
        build_message(): tuple[str, ...]
    }
    ExceededAttemptsError <|-- AutoDevError

    class ModelTimeoutError:::error {
        exit_code: int
        \_\_init\_\_(model: str, request_timeout: int)
        build_message(): tuple[str, ...]
    }
    ModelTimeoutError <|-- AutoDevError

    %%% model

    class ModelNameError:::error {
        exit_code: int
        \_\_init\_\_(model: str)
        build_message(): tuple[str, ...]
    }
    ModelNameError <|-- AutoDevError

    class ModelAlreadyInstalledError:::error {
        exit_code: int
        \_\_init\_\_(model: str)
        build_message(): tuple[str, ...]
    }
    ModelAlreadyInstalledError <|-- AutoDevError

    class ModelNotInstalledError:::error {
        exit_code: int
        \_\_init\_\_(model: str)
        build_message(): tuple[str, ...]
    }
    ModelNotInstalledError <|-- AutoDevError

    %%% prompt

    class PromptPathError:::error {
        exit_code: int
        \_\_init\_\_(prompt_path: str)
        build_message(): tuple[str, ...]
    }
    PromptPathError <|-- AutoDevError
    PromptPathError ..> os

    class MissingAttributesError:::error {
        exit_code: int
        \_\_init\_\_(prompt_path: str)
        build_message(): tuple[str, ...]
    }
    MissingAttributesError <|-- AutoDevError
    MissingAttributesError ..> os

    class JsonValueTypeError:::error {
        exit_code: int
        \_\_init\_\_(prompt_path: str)
        build_message(): tuple[str, ...]
    }
    JsonValueTypeError <|-- AutoDevError
    JsonValueTypeError ..> os

    %% llm

    class Model:::llm {
        \_\_init\_\_(prompt_path: str)
    }
    Model ..> model
    Model ..> litellm
    Model ..> ModelNameError
    Model ..> ModelNotInstalledError
    Model ..> ModelTimeoutError
    Model ..> server

    class model:::llm {
        model_names: list[str]
    }

    class server:::llm {
        start()
        is_model_installed(model_name: str)
        install_model(model_name: str)
        uninstall_model(model_name: str)
        get_api_base()
        get_server_model_name(model_name: str)
    }
    server ..> requests
    server ..> time
    server ..> subprocess
    server ..> atexit
    server ..> ModelNotInstalledError
    server ..> OllamaNotInstalledError

    %% services

    %% check

    class check:::serviceCheck {
        check_flake(flake_path: str): CheckResult
    }
    check ..> subprocess
    check ..> CheckResult

    class CheckResult:::serviceCheck {
        outome: bool
        error: str
        \_\_init\_\_(outcome: bool, error: str)
    }

    class configuration:::service {
        add_config(model_name: str, project_path: str, prompt_path: str)
    }
    configuration ..> os
    configuration ..> subprocess
    configuration ..> Model
    configuration ..> check
    configuration ..> generator
    configuration ..> console
    configuration ..> file
    configuration ..> FlakeExistsError
    configuration ..> ExceededAttemptsError

    class direnv:::service {
        add_direnv(project_path: str)
    }
    direnv ..> file
    direnv ..> EnvrcExistError

    class generator:::service {
        generate_config(model: str, project_path: str, prompt_path: str): str
    }
    generator ..> Model
    generator ..> prompt

    class install:::service {
        install(model_name: str)
    }
    install ..> server
    install ..> model
    install ..> ModelAlreadyInstalledError
    install ..> ModelNameError

    class list:::service {
        list()
    }
    list ..> console
    list ..> model
    list ..> server
    list ..> Table

    class prompt:::service {
        get_prompt(prompt_path: str, project_path: str): str
    }
    prompt ..> os
    prompt ..> json
    prompt ..> PromptPathError
    prompt ..> MissingAttributesError
    prompt ..> JsonValueTypeError
    prompt ..> file_system
    prompt ..> tree

    class uninstall:::service {
        uninstall(model_name: str)
    }
    uninstall ..> model
    uninstall ..> server
    uninstall ..> ModelNameError
    uninstall ..> ModelNotInstalledError

    %%% output

    class console:::serviceOutput {
        PrintType(Enum)

        init(quiet: bool = False)
        cli_print(printType: PrintType, *message: str)
        get_spinner(message: str): Context
        print_table(table: Table)
    }
    console ..> Table
    console ..> Enum
    console ..> contextlib
    console ..> rich

    class file:::serviceOutput {
        file_exists(path: str): bool
        create_file(name: str, contents: str, path: str)
        write_file(name: str, contents: str, path: str)
    }
    file ..> os

    %% utils

    class Table:::util {
        \_\_init\_\_(headers: list[str], rows: list[list[str]] = []):
        add_row(row: list[str])
    }

    class tree:::util {
        generate_project_tree(project_path: str, depth: int) DisplayTree
    }
    tree ..> display_tree

    %% builtins
    class os:::builtin
    <<builtin>> os
    class sys:::builtin
    <<builtin>> sys
    class Enum:::builtin
    <<builtin>> Enum
    class contextlib:::builtin
    <<builtin>> contextlib
    class Exception:::builtin
    <<builtin>> Exception
    class abc:::builtin
    <<builtin>> abc
    class requests:::builtin
    <<builtin>> requests
    class time:::builtin
    <<builtin>> time
    class subprocess:::builtin
    <<builtin>> subprocess
    class atexit:::builtin
    <<builtin>> atexit
    class Optional:::builtin
    <<builtin>> Optional
    class json:::builtin
    <<builtin>> json

    %% external dependencies
    class docopt:::extern
    <<extern>> docopt
    class rich:::extern
    <<extern>> rich
    class display_tree:::extern
    <<extern>> display_tree
    class litellm:::extern
    <<extern>> litellm

    %% legend

    class Builtin:::builtin
    class Extern:::extern
    class Service:::service
    class Output:::serviceOutput
    class Check:::serviceCheck
    class Error:::error
    class LLM:::llm
    class Utils:::utils
    class FileSystem:::file_system

    %% style

    classDef builtin fill:#1565C0,stroke:#90CAF9,stroke-width:1px
    classDef extern fill:#2E7D32,stroke:#A5D6A7,stroke-width:1px
    classDef service fill:#EF6C00,stroke:#FFCC80,stroke-width:1px
    classDef serviceOutput fill:#FF9800,stroke:#FFCC80,stroke-width:1px
    classDef serviceCheck fill:#FFB74D,stroke:#FFCC80,stroke-width:1px
    classDef error fill:#C62828,stroke:#EF9A9A,stroke-width:1px
    classDef llm fill:#6A1B9A,stroke:#CE93D8,stroke-width:1px
    classDef utils fill:#424242,stroke:#BDBDBD,stroke-width:1px
    classDef file_system fill:#00796B,stroke:#4DB6AC,stroke-width:1px
